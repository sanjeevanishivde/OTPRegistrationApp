package com.dsp.otpregistration.controller;

import com.dsp.otpregistration.dto.RegistrationRequest;
import com.dsp.otpregistration.entity.PersonEntry;
import com.dsp.otpregistration.entity.RegistrationMaster;
import com.dsp.otpregistration.repository.PersonEntryRepository;
import com.dsp.otpregistration.repository.RegistrationMasterRepository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/register")
@CrossOrigin(origins = "*") // Allow CORS
public class RegistrationMasterController {

    @Autowired
    private RegistrationMasterRepository masterRepo;

    @Autowired
    private PersonEntryRepository entryRepo;

    @PostMapping
    public ResponseEntity<String> register(@RequestBody RegistrationRequest request) {
        try {
            // Validate DOB format
            LocalDate dob;
            try {
                dob = LocalDate.parse(request.getDob()); // Format: yyyy-MM-dd
            } catch (Exception e) {
                return ResponseEntity.badRequest().body("Invalid date format. Use yyyy-MM-dd.");
            }

            // Check if user already exists
            Optional<RegistrationMaster> optional = masterRepo.findByMobile(request.getRegMobile());

            RegistrationMaster rm = optional.orElseGet(() -> {
                RegistrationMaster newMaster = new RegistrationMaster();
                newMaster.setMobile(request.getRegMobile());
                newMaster.setOtpVerified(false);
                newMaster.setRegistrationComplete(false);
                newMaster.setPaymentDone(false);
                newMaster.setCreatedAt(LocalDateTime.now());
                return masterRepo.save(newMaster);
            });

            // Create PersonEntry
            PersonEntry person = new PersonEntry();
            person.setFirstName(request.getName());
            person.setDob(dob);
            person.setRole(request.getRole());
            person.setRegistration(rm);

            entryRepo.save(person);

            // Update master record
            rm.setRegistrationComplete(true);
            masterRepo.save(rm);

            return ResponseEntity.ok("User registered successfully");
        } catch (Exception e) {
            e.printStackTrace(); // log full error in backend logs
            return ResponseEntity.status(500).body("Registration failed: " + e.getMessage());
        }
    }

    @GetMapping("/{mobile}/entries")
    public ResponseEntity<List<PersonEntry>> getPersonEntriesByMobile(@PathVariable String mobile) {
        Optional<RegistrationMaster> optional = masterRepo.findByMobile(mobile);
        if (optional.isPresent()) {
            List<PersonEntry> entries = entryRepo.findByRegistration(optional.get());
            return ResponseEntity.ok(entries);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
